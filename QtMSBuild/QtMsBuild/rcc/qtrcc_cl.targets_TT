<?xml version="1.0" encoding="utf-8"?>
<!--************************************************************************************************
 Copyright (C) 2023 The Qt Company Ltd.
 SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
****************************************************************************************************
<#@output extension="targets" #>
<#@include file="$(SolutionDir)\common.tt" #>
<#@assembly Name="System.Xml" #>
<#@assembly Name="System.Xml.Linq" #>
<#@import namespace="System.Collections.Generic" #>
<#@import namespace="System.Linq" #>
<#@import namespace="System.Text" #>
<#@import namespace="System.Xml" #>
<#@import namespace="System.Xml.Linq" #>
<#
          var pathRuleCl = Path.Combine(VC_TARGETS_PATH, "1033", "cl.xml");
          var xmlRule = XmlLoad(File.ReadAllText(pathRuleCl, Encoding.UTF8));
#>
**          <#=WARNING_GENERATED_FILE#>
****************************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="QtRccOverrideCpp" DependsOnTargets="QtRccPrepare;QtGetDefaultClCompile"
    Inputs="%(QtRcc.Identity)" Outputs="@(QtRcc->'####### Don't skip this target #######')">

    <Message Importance="High" Condition="'$(QtDebug)' == 'true'"
      Text="## QtRccOverrideCpp @(QtRcc)" />

    <PropertyGroup Condition="'$(QtVsProjectClProperties)' == 'true'">
      <override_cl_compile>%(QtRcc.OverrideClCompile)</override_cl_compile>
    </PropertyGroup>

    <ItemGroup Condition="'$(override_cl_compile)' == 'extend'">
      <QtRcc>
        <!-- BEGIN Generated Text <#=XML_COMMENT_END#>
<#=
XmlPrint(xmlRule.Elements()
    .Where(x => x.Name.ToString().Equals("StringListProperty"))
    .Where(x => (string)x.Attribute("Visible") != "false")
    .Where(x => (string)x.Attribute("Category") != "Command Line")
    .Where(x => !x.Descendants("DataSource").Any())
    .Select(x => new XElement((string)x.Attribute("Name"),
        string.Format(
            "@(ClCompile->WithMetadataValue('Identity','DefaultClCompile')->'%({0})');%(QtRcc.{0})",
            (string)x.Attribute("Name")))))
#>
        <#=XML_COMMENT_BEGIN#> END Generated Text -->
      <AdditionalCppOptions
        Condition="'%(QtRcc.AdditionalCppOptions)' != ''"
        >@(ClCompile->
          WithMetadataValue('Identity','DefaultClCompile')->
          '%(AdditionalOptions)') %(QtRcc.AdditionalCppOptions)</AdditionalCppOptions>
      <AdditionalCppOptions
        Condition="'%(QtRcc.AdditionalCppOptions)' == ''"
        >@(ClCompile->
          WithMetadataValue('Identity','DefaultClCompile')->
          '%(AdditionalOptions)')</AdditionalCppOptions>
      </QtRcc>
    </ItemGroup>

    <ItemGroup Condition="'$(override_cl_compile)' == 'false'">
      <QtRcc>
        <!-- BEGIN Generated Text <#=XML_COMMENT_END#>
<#=
XmlPrint(xmlRule.Elements()
    .Where(x => x.Name.ToString().EndsWith("Property"))
    .Where(x => (string)x.Attribute("Visible") != "false")
    .Where(x => (string)x.Attribute("Category") != "Command Line")
    .Where(x => !x.Descendants("DataSource").Any())
    .Select(x => new XElement((string)x.Attribute("Name"),
        new XAttribute("Condition",
            string.Format("'%(QtRcc.{0})' != ''", (string)x.Attribute("Name"))),
        string.Format(
            "@(ClCompile->WithMetadataValue('Identity','DefaultClCompile')->'%({0})')",
            (string)x.Attribute("Name")))))
#>
        <#=XML_COMMENT_BEGIN#> END Generated Text -->
      </QtRcc>
    </ItemGroup>

    <!--
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Clean-up
    // -->
    <PropertyGroup>
      <override_cl_compile/>
    </PropertyGroup>
  </Target>
</Project>
