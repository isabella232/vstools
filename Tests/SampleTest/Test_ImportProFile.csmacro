/***************************************************************************************************
 Copyright (C) 2023 The Qt Company Ltd.
 SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
***************************************************************************************************/

//# using System.IO

//# var string QtConfPath

var qtConf = File.ReadAllLines(QtConfPath);
var prefix = qtConf
    .Where(x => x.StartsWith("Prefix=")).First()
    .Substring("Prefix=".Length);

var qtDir = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(QtConfPath), prefix));

var examplesRelativePath = qtConf
    .Where(x => x.StartsWith("Examples=")).First()
    .Substring("Examples=".Length);
var examplesPath = Path.GetFullPath(Path.Combine(qtDir, examplesRelativePath));
var wigglyPath = Path.GetFullPath(Path.Combine(examplesPath, "widgets", "widgets", "wiggly"));

var projectName = "QtVsTest_Import";
var tempDir = Environment.GetEnvironmentVariable("LOCALAPPDATA");
var projectDir = Path.Combine(tempDir, projectName);
var projectFile = Path.Combine(projectDir, "wiggly.pro");

if (Directory.Exists(projectDir))
    Directory.Delete(projectDir, recursive: true);
Directory.CreateDirectory(projectDir);

Directory.EnumerateFiles(wigglyPath)
    .Where(x => new[] { ".pro", ".h", ".cpp" }.Contains(Path.GetExtension(x)))
    .ToList().ForEach(x => File.Copy(x, Path.Combine(projectDir, Path.GetFileName(x))));

var taskOpenPro = Task.Run(() => Dte.ExecuteCommand("QtVSTools.OpenQtProjectFile.pro"));
taskOpenPro.Wait(0);

//# ui context VSROOT 3000 => "Select a Qt Project to Add to the Solution"
//# ui pattern Value proFilePath => new[] { "File name:", "combo box" }, new[] { "File name:", "edit" }
proFilePath.SetValue(projectFile);
//# ui pattern Invoke => new[] { "Open", "button", "1" }

if (!taskOpenPro.Wait(15000))
    throw new Exception("Timeout: QtVSTools.OpenQtProjectFile.pro");
