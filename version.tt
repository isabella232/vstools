<#@include file="common.tt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#
/***************************************************************************************************
 Copyright (C) 2023 The Qt Company Ltd.
 SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
***************************************************************************************************/

    Version v;
    try {
        var versionText = File
            .ReadAllText(Path.Combine(SolutionDir, "version.log"))
            .Replace("\r\n", "")
            .Trim();
        v = new Version(versionText);
    } catch (Exception) {
        Error("Error reading extension version");
        v = new Version("0.0.0.0");
    }

    string QT_VS_TOOLS_VERSION = $"{v.Major}.{v.Minor}.{v.Build}";

    string QT_VS_TOOLS_VERSION_TAG = $"{v.Major}{v.Minor}{v.Build}";

    string QT_VS_TOOLS_VERSION_ASSEMBLY =
        (v.Revision == -1)
            ? $"{v.Major}.{v.Minor}.{v.Build}.0"
            : $"{v.Major}.{v.Minor}.{v.Build}.{v.Revision}";

    string QT_VS_TOOLS_VERSION_ASSEMBLY_FILE = QT_VS_TOOLS_VERSION_ASSEMBLY;

    string QT_VS_TOOLS_VERSION_USER =
        (v.Revision <= 0)
            ? $"{v.Major}.{v.Minor}.{v.Build}"
            : $"{v.Major}.{v.Minor}.{v.Build} (rev.{v.Revision})";

    string QT_VS_TOOLS_VERSION_MANIFEST =
        (v.Revision <= 0)
            ? $"{v.Major}.{v.Minor}.{v.Build}"
            : $"{v.Major}.{v.Minor}.{v.Build}.{v.Revision}";
#>
