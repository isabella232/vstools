/***************************************************************************************************
 Copyright (C) 2024 The Qt Company Ltd.
 SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0
***************************************************************************************************/

using System;
using System.ComponentModel;
using System.Linq;
using Microsoft.VisualStudio.Shell;

namespace QtVsTools.TestAdapter
{
    using Core;
    using QtVsTools.Core.Common;

    public class QtTestPage : DialogPage
    {
        #region Converter

        private class QtVersions : Converters.QtVersionConverter
        {
            protected override bool IsCompatible(string qtVersion)
            {
                return VersionInformation.GetOrAddByName(qtVersion) != null;
            }
        }

        private class FormatConverter : Converters.CollectionConverter<string>
        {
            protected override string[] GetCollection => Resources.SupportedOutputFormats.ToArray();
        }

        private class LevelConverter : Converters.CollectionConverter<string>
        {
            protected override string[] GetCollection => new[] { "", "silent", "v1", "v2" };
        }

        #endregion // Converter

        #region General

        [Category("General")]
        [DisplayName("Qt Version")]
        [Description("The Qt version used to build and run the tests. The default value is "
            + "$(DefaultQtVersion).")]
        [TypeConverter(typeof(QtVersions))]
        public string QtInstallOption
        {
            get => QtInstall;
            set => QtTestPageSettings.Instance.SetValue(() => QtInstall, value);
        }

        [Settings("QtInstall", "$(DefaultQtVersion)")]
        public static string QtInstall => QtTestPageSettings.Instance.GetValue(() => QtInstall);

        [Category("General")]
        [DisplayName("Enable test adapter")]
        [Description("Enables or disables the Qt test adapter. When disabled, it will not "
            + "participate in test discovery or execution. The default value is enabled.")]
        [TypeConverter(typeof(Converters.EnableDisableConverter))]
        public bool EnableAdapterOption
        {
            get => EnableAdapter;
            set => QtTestPageSettings.Instance.SetValue(() => EnableAdapter, value);
        }

        [Settings("EnableAdapter", true)]
        public static bool EnableAdapter =>
            QtTestPageSettings.Instance.GetValue(() => EnableAdapter);

        [Category("General")]
        [DisplayName("Show test adapter output")]
        [Description("Enables or disables showing all output generated by the test adapter into "
            + "the default 'Output' pane. The default value is disabled.")]
        [TypeConverter(typeof(Converters.EnableDisableConverter))]
        public bool ShowAdapterOutputOption
        {
            get => ShowAdapterOutput;
            set => QtTestPageSettings.Instance.SetValue(() => ShowAdapterOutput, value);
        }

        [Settings("ShowAdapterOutput", false)]
        public static bool ShowAdapterOutput =>
            QtTestPageSettings.Instance.GetValue(() => ShowAdapterOutput);

        [Category("General")]
        [DisplayName("Test timeout (ms)")]
        [Description("Terminate a running test if it exceeds the specified timeout in "
            + "milliseconds. A timeout of -1 means the test will not be terminated. The default "
            + "value is -1.")]
        public int TestTimeoutOption
        {
            get => TestTimeout;
            set => QtTestPageSettings.Instance.SetValue(() => TestTimeout, value);
        }

        [Settings("TestTimeout", -1)]
        public static int TestTimeout => QtTestPageSettings.Instance.GetValue(() => TestTimeout);

        [Category("General")]
        [DisplayName("Test discovery timeout (ms)")]
        [Description("Terminate a running discovery if it exceeds the specified timeout in "
            + "milliseconds. A timeout of -1 means the test will not be terminated. The default "
            + "value is 2000.")]
        public int DiscoveryTimeoutOption
        {
            get => DiscoveryTimeout;
            set => QtTestPageSettings.Instance.SetValue(() => DiscoveryTimeout, value);
        }

        [Settings("DiscoveryTimeout", 2000)]
        public static int DiscoveryTimeout =>
            QtTestPageSettings.Instance.GetValue(() => DiscoveryTimeout);

        [Category("General")]
        [DisplayName("Parse PDB files")]
        [Description("Enable or disable parsing of PDB files to retrieve the source file and line "
            + "number of test functions for an executable. The default value is enabled.")]
        [TypeConverter(typeof(Converters.EnableDisableConverter))]
        public bool ParsePdbFilesOption
        {
            get => ParsePdbFiles;
            set => QtTestPageSettings.Instance.SetValue(() => ParsePdbFiles, value);
        }

        [Settings("ParsePdbFiles", true)]
        public static bool ParsePdbFiles =>
            QtTestPageSettings.Instance.GetValue(() => ParsePdbFiles);

        [Category("General")]
        [DisplayName("Console Binaries Only")]
        [Description("Scan only console binaries (/SUBSYSTEM:CONSOLE) for Qt test functions. "
            + "Set to false to include all binary types at the cost of longer discovery time."
            + "The default value is true.")]
        public bool SubsystemConsoleOnlyOption
        {
            get => SubsystemConsoleOnly;
            set => QtTestPageSettings.Instance.SetValue(() => SubsystemConsoleOnly, value);
        }

        [Settings("SubsystemConsoleOnly", true)]
        public static bool SubsystemConsoleOnly =>
            QtTestPageSettings.Instance.GetValue(() => SubsystemConsoleOnly);

        #endregion // General

        #region Output

        [Category("Output")]
        [DisplayName("Filename")]
        [Description("Write the test output to the specified file")]
        public string FileNameOption
        {
            get => FileName;
            set => QtTestPageSettings.Instance.SetValue(() => FileName,
                string.IsNullOrWhiteSpace(value) ? null : value);
        }

        [Settings("OutputFileName", null)]
        public static string FileName => QtTestPageSettings.Instance.GetValue(() => FileName);

        [Category("Output")]
        [DisplayName("Format")]
        [TypeConverter(typeof(FormatConverter))]
        [Description("Write the test output using the specified format (one of txt, csv, "
            + "junitxml, xml, lightxml, teamcity or tap). The default value is xml.")]
        public string FileFormatOption
        {
            get => FileFormat;
            set => QtTestPageSettings.Instance.SetValue(() => FileFormat, value);
        }

        [Settings("OutputFileFormat", "xml")]
        public static string FileFormat => QtTestPageSettings.Instance.GetValue(() => FileFormat);

        #endregion // Output

        #region Verbosity

        [Category("Verbosity")]
        [DisplayName("Level")]
        [TypeConverter(typeof(LevelConverter))]
        [Description("Control how much detail is reported in test logs:\r\n"
            + "\tsilent\r\nSilent output; only shows fatal errors, test failures and minimal status"
                + " messages.\r\n"
            + "\tv1\r\nVerbose output; shows when each test function is entered. (This option only "
                + "affects plain text output.)\r\n"
            + "\tv2\r\nExtended verbose output; shows each QCOMPARE() and QVERIFY(). (This option "
                + "affects all output formats and implies -v1 for plain text output.)\r\n"
            + "The default value is empty.")]
        public string LevelOption
        {
            get => Level;
            set => QtTestPageSettings.Instance.SetValue(() => Level,
                string.IsNullOrWhiteSpace(value) ? null : value);
        }

        [Settings("VerbosityLevel", null)]
        public static string Level => QtTestPageSettings.Instance.GetValue(() => Level);

        [Category("Testing Options")]
        [DisplayName("Log signals")]
        [TypeConverter(typeof(Converters.EnableDisableConverter))]
        [Description("Enables or disables logging all signals that get emitted and the slot "
            + "invocations resulting from those signals. The default value is disabled.")]
        public bool LogSignalsOption
        {
            get => LogSignals;
            set => QtTestPageSettings.Instance.SetValue(() => LogSignals, value);
        }

        [Settings("LogSignals", false)]
        public static bool LogSignals => QtTestPageSettings.Instance.GetValue(() => LogSignals);

        #endregion // Verbosity

        #region Testing Options

        [Category("Testing Options")]
        [DisplayName("Event delay")]
        [Description("If no delay is specified for keyboard or mouse simulation "
            + "(QTest::keyClick(), QTest::mouseClick() etc.), the value from this parameter (in "
            + "milliseconds) is substituted. The default value is -1.")]
        public int EventDelayOption
        {
            get => EventDelay;
            set => QtTestPageSettings.Instance.SetValue(() => EventDelay, value);
        }

        [Settings("EventDelay", -1)]
        public static int EventDelay => QtTestPageSettings.Instance.GetValue(() => EventDelay);

        [Category("Testing Options")]
        [DisplayName("Key delay")]
        [Description("Like 'Event delay', but only influences keyboard simulation and not mouse "
            + "simulation. The default value is -1.")]
        public int KeyDelayOption
        {
            get => KeyDelay;
            set => QtTestPageSettings.Instance.SetValue(() => KeyDelay, value);
        }

        [Settings("KeyDelay", -1)]
        public static int KeyDelay => QtTestPageSettings.Instance.GetValue(() => EventDelay);

        [Category("Testing Options")]
        [DisplayName("Mouse delay")]
        [Description("Like 'Event delay', but only influences mouse simulation and not keyboard "
            + "simulation. The default value is -1.")]
        public int MouseDelayOption
        {
            get => MouseDelay;
            set => QtTestPageSettings.Instance.SetValue(() => MouseDelay, value);
        }

        [Settings("MouseDelay", -1)]
        public static int MouseDelay => QtTestPageSettings.Instance.GetValue(() => MouseDelay);

        [Category("Testing Options")]
        [DisplayName("Max. warnings")]
        [Description("Sets the maximum number of warnings to output. 0 for unlimited, defaults to "
            + "2000.")]
        public int MaxWarningsOption
        {
            get => MaxWarnings;
            set => QtTestPageSettings.Instance.SetValue(() => MaxWarnings, value);
        }

        [Settings("MaxWarnings", 2000)]
        public static int MaxWarnings => QtTestPageSettings.Instance.GetValue(() => MaxWarnings);

        [Category("Testing Options")]
        [DisplayName("Crash handler")]
        [TypeConverter(typeof(Converters.EnableDisableConverter))]
        [Description("Enables or disables the Windows Error Reporting dialog, which is disabled "
            + "by default.")]
        public bool NoCrashHandlerOption
        {
            get => NoCrashHandler;
            set => QtTestPageSettings.Instance.SetValue(() => NoCrashHandler, value);
        }

        [Settings("NoCrashHandler", false)]
        public static bool NoCrashHandler =>
            QtTestPageSettings.Instance.GetValue(() => NoCrashHandler);

        #endregion // Testing Options

        public override void LoadSettingsFromStorage()
        {}

        public override void SaveSettingsToStorage()
        {
            try {
                QtTestPageSettings.Instance.SaveSettings();
            } catch (Exception exception) {
                exception.Log();
            }
        }
    }
}
